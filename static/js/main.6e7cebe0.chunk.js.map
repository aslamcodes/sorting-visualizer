{"version":3,"sources":["algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/heapSort.js","Visualizer/SortingVisualizer.js","algorithms/bubbleSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","items","left","right","index","partition","pivot","swap","leftIndex","rightIndex","temp","heapify","arr","n","largest","l","r","SortingVisualizer","useState","value","setValue","selectedAlgo","setAlgo","setArray","disableSlider","useEffect","randomFromInterval","createArr","quickSort","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","isColor","isLast","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","innerHTML","heapSort","console","log","getHeapSortAnimations","sort","mergeSort","getBubbleSortAnimations","bubbleSort","className","map","ele","width","onClick","random","Slider","min","max","onChange","_","newValue","margin","disabled","src","alt","cursor","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6e7cebe0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export const getQuickSortAnimations = (items, left, right) => {\n  var index;\n  let animations = [];\n  if (items.length > 1) {\n    index = partition(items, left, right, animations);\n    if (left < index - 1) {\n      animations.push(...getQuickSortAnimations(items, left, index - 1));\n    }\n    if (index < right) {\n      animations.push(...getQuickSortAnimations(items, index, right));\n    }\n  }\n  return animations;\n};\n\nconst partition = (items, left, right, animations) => {\n  var pivot = items[Math.floor((right + left) / 2)],\n    i = left,\n    j = right;\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n    while (items[j] > pivot) {\n      j--;\n    }\n    if (i <= j) {\n      swap(items, i, j, animations);\n      i++;\n      j--;\n    }\n  }\n  return i;\n};\n\nconst swap = (items, leftIndex, rightIndex, animations) => {\n  animations.push([leftIndex, rightIndex, true, false]);\n  animations.push([leftIndex, rightIndex, true, true]);\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n  animations.push([leftIndex, items[leftIndex], false, false]);\n  animations.push([rightIndex, temp, false, false]);\n};\n","export const getHeapSortAnimations = (arr) => {\n  var n = arr.length;\n  var i;\n  var animations = [];\n\n  for (i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i, animations);\n\n  for (i = n - 1; i > 0; i--) {\n    animations.push([0, i, true, false]);\n    animations.push([0, i, true, true]);\n    var temp = arr[0];\n    arr[0] = arr[i];\n    arr[i] = temp;\n    animations.push([0, arr[0], false, false]);\n    animations.push([i, temp, false, false]);\n\n    heapify(arr, i, 0, animations);\n  }\n  console.log(arr);\n  return animations;\n};\n\nfunction heapify(arr, n, i, animations) {\n  var largest = i;\n  var l = 2 * i + 1;\n  var r = 2 * i + 2;\n\n  if (l < n && arr[l] > arr[largest]) largest = l;\n\n  if (r < n && arr[r] > arr[largest]) largest = r;\n\n  if (largest !== i) {\n    animations.push([i, largest, true, false]);\n    animations.push([i, largest, true, true]);\n    var swap = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = swap;\n    animations.push([i, arr[i], false, false]);\n    animations.push([largest, swap, false, false]);\n\n    heapify(arr, n, largest, animations);\n  }\n}\n","import { Slider } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { getBubbleSortAnimations } from \"../algorithms/bubbleSort\";\nimport { getMergeSortAnimations } from \"../algorithms/mergeSort\";\nimport { getQuickSortAnimations } from \"../algorithms/quickSort\";\nimport { getHeapSortAnimations } from \"../algorithms/heapSort\";\nimport \"./SortingVisualizer.css\";\n\nconst SortingVisualizer = () => {\n  const [value, setValue] = useState(19);\n  const [selectedAlgo, setAlgo] = useState(\"Merge Sort\");\n  const [array, setArray] = useState([]);\n  const [disableSlider, setDisableSlider] = useState(false);\n\n  useEffect(() => {\n    const createArr = () => {\n      const array = [];\n      for (let i = 0; i < value; i++) {\n        array.push(randomFromInterval(15, 600));\n      }\n      setArray(array);\n    };\n\n    createArr();\n  }, [value]);\n\n  const mergeSort = () => {\n    const animations = getMergeSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"#4ebd9c\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * (value < 20 ? 100 : 3));\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (value < 20) {\n            arrayBars[barOneIdx].innerHTML = newHeight;\n          }\n        }, i * (value < 20 ? 100 : 3));\n      }\n    }\n  };\n\n  const bubbleSort = () => {\n    const animations = getBubbleSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx, isColor, isLast] = animations[i];\n      if (isColor) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = !isLast ? \"red\" : \"#4ebd9c\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * (value < 20 ? 100 : 1));\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (value < 20) {\n            arrayBars[barOneIdx].innerHTML = newHeight;\n          }\n        }, i * (value < 20 ? 100 : 1));\n      }\n    }\n  };\n\n  const quickSort = () => {\n    const animations = getQuickSortAnimations(array, 0, array.length - 1);\n    const arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx, isColor, isLast] = animations[i];\n      if (isColor) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = !isLast ? \"red\" : \"#4ebd9c\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * (value < 20 ? 100 : 10));\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (value < 20) {\n            arrayBars[barOneIdx].innerHTML = newHeight;\n          }\n        }, i * (value < 20 ? 100 : 10));\n      }\n    }\n  };\n\n  const heapSort = () => {\n    const animations = getHeapSortAnimations(array);\n    console.log(animations);\n    const arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx, isColor, isLast] = animations[i];\n      if (isColor) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = !isLast ? \"red\" : \"#4ebd9c\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * (value < 20 ? 100 : 10));\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (value < 20) {\n            arrayBars[barOneIdx].innerHTML = newHeight;\n          }\n        }, i * (value < 20 ? 100 : 10));\n      }\n    }\n  };\n\n  const sort = () => {\n    switch (selectedAlgo) {\n      case \"Merge Sort\":\n        mergeSort();\n        break;\n\n      case \"Bubble Sort\":\n        bubbleSort();\n        break;\n\n      case \"Quick Sort\":\n        quickSort();\n        break;\n\n      case \"Heap Sort\":\n        heapSort();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"visualizer\">\n      {array.map((ele, index) => {\n        if (value < 20) {\n          return (\n            <div\n              key={index}\n              className=\"arrayBar\"\n              style={{ height: `${ele}px`, width: \"40px\" }}\n            >\n              {ele}\n            </div>\n          );\n        }\n        return (\n          <div\n            key={index}\n            className=\"arrayBar\"\n            style={{ height: `${ele}px`, width: \"2.5px\" }}\n          />\n        );\n      })}\n      {selectedAlgo === \"Heap Sort\" ? (\n        <p className=\"note\">\n          <span>NOTE:</span> The algorithm used for heap sort is not a stable\n          one. So in some case you can't get the correct sorted order. Will make\n          it stable in the future\n        </p>\n      ) : (\n        \"\"\n      )}\n      <div className=\"bottomContainer\">\n        <h1 className=\"title\">Sorting Visualizer</h1>\n        <div className=\"divider\" />\n        <div className=\"algorithms\">\n          <p\n            className={selectedAlgo === \"Merge Sort\" ? \"active\" : \"\"}\n            onClick={() => {\n              setAlgo(\"Merge Sort\");\n            }}\n          >\n            Merge Sort\n          </p>\n          <p\n            className={selectedAlgo === \"Bubble Sort\" ? \"active\" : \"\"}\n            onClick={() => setAlgo(\"Bubble Sort\")}\n          >\n            Bubble Sort\n          </p>\n          <p\n            className={selectedAlgo === \"Quick Sort\" ? \"active\" : \"\"}\n            onClick={() => setAlgo(\"Quick Sort\")}\n          >\n            Quick Sort\n          </p>\n          <p\n            className={selectedAlgo === \"Heap Sort\" ? \"active\" : \"\"}\n            onClick={() => setAlgo(\"Heap Sort\")}\n          >\n            Heap Sort\n          </p>\n        </div>\n        <div className=\"divider\" />\n        <p\n          className=\"generate\"\n          onClick={() =>\n            setValue(Math.floor(Math.random() * (20 - 10 * 1) + 10))\n          }\n        >\n          Generate New Array\n        </p>\n        <div className=\"divider\" />\n        <div className=\"range\">\n          <p className=\"text\">Size and Speed 👉 </p>\n          <Slider\n            value={value}\n            min={5}\n            max={200}\n            onChange={(_, newValue) => setValue(newValue)}\n            style={{\n              color: \"#fff\",\n              width: \"300px\",\n              margin: \"0px 1rem\",\n            }}\n            disabled={disableSlider}\n          />\n        </div>\n        <img\n          src=\"https://www.summitcl.com/wp-content/uploads/2018/11/play-button-overlay-png-1.png\"\n          alt=\"Sort!\"\n          style={{\n            width: \"60px\",\n            height: \"60px\",\n            margin: \"0px 1rem\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => sort()}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n\nconst randomFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min * 1) + min);\n};\n","export const getBubbleSortAnimations = (array) => {\n  let n = array.length;\n  let animations = [];\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        animations.push([j, j + 1, true, false]);\n        animations.push([j, j + 1, true, true]);\n        var temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animations.push([j, array[j], false, false]);\n        animations.push([j + 1, temp, false, false]);\n      }\n    }\n  }\n  return animations;\n};\n","import SortingVisualizer from \"./Visualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div>\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}